class Solution {
public:
vector<vector<int>> result;
    vector<vector<int>> combinationSum3(int k, int n) {
        if(k<=0||n<=0)
            return result;
        vector<int> track;//路径纪录
        backtrack(n, k, 1, track);
        return result;
    }
    void backtrack(int n, int k, int start, vector<int>& track)
    {
        if(n<0)
            return;
        // 到达树的底部
        if(track.size()==k&&n==0)
        {
            result.push_back(track);
            return;
        }
        //n表示了树的宽度
        for(int i=start;i<=9;++i)
        {
            track.push_back(i);
            backtrack(n-i, k, i+1,track);
            track.pop_back();
        }
    }
};

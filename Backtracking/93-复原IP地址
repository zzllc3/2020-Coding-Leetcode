class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        if (s.size() == 0 || s.size() < 4)
            return res;
        backtrack(s,0);
        return res;
    }
private:
    vector<string> res;
    vector<string> track;

    bool isValid(string ip)
    {
        int val = stoi(ip);
        if(val>255)
            return false;
        if(ip[0]=='0'&&ip.size()>=2)
            return false;
        return true;
    }

    void backtrack(string& s, int k)
    {
        //首先判断剩余的位数，是不是还能满足要求，比如25525511135，若2.5.5.25511135显然不满足，这可以预判
        //4组，每组最多3位数字
        int maxLen = (4 - track.size()) * 3;
        if (s.size() - k > maxLen)
            return;
        
        //满足结束条件
        if (track.size() == 4 && k == s.size()) 
        {
            string ans = "";
            for (int i = 0; i < 4; ++i) 
            {
                ans += track[i];
                if (i != 3)    
                    ans += ".";
            }
            res.push_back(ans);
            return;
        }

        for(int i=k;i<s.size()&&i<=k+2;++i)
        {
            string ip = s.substr(k, i - k+1);
            if (!isValid(ip))    
                continue;
            track.push_back(ip);
            backtrack(s, i + 1);
            track.pop_back();
        }
    }
};

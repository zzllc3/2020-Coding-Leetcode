//c3
class Solution {
public:
    int findMin(vector<int>& nums) {
        int start = 0;
        int end = nums.size()-1;
        int resmin = INT_MAX;
        while(start<=end)
        {
            int mid = start+(end-start)/2;
            if(nums[start]<=nums[mid])//0~mid有序
            {
                resmin = min(resmin,nums[start]);
                start = mid+1;
            }
            else//mid~n-1有序
            {
                resmin = min(resmin,nums[mid]);
                end = mid-1;
            }
        }
        return resmin;
    }
};

class Solution {
public:
    int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[right]) {          
                left = mid + 1;
            } else {                               
                right = mid;
            }
        }
        return nums[left];
    }
};

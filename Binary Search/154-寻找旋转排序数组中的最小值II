//c3
class Solution {
public:
    int findMin(vector<int>& nums) {
        int start = 0;
        int end = nums.size()-1;
        int resmin = INT_MAX;
        while(start<=end)
        {
            while(start!=end && nums[start]==nums[end]) 
                end--; //无重复值的解法中添加这行
            int mid = start+(end-start)/2;
            if(nums[start]<=nums[mid])//0~mid有序
            {
                resmin = min(resmin,nums[start]);
                start = mid+1;
            }
            else//mid~n-1有序
            {
                resmin = min(resmin,nums[mid]);
                end = mid-1;
            }
        }
        return resmin;
    }
};

class Solution {
public:
    int findMin(vector<int>& nums) {
        int low = 0;
        int high = nums.size() - 1;
        while (low < high) {
            int pivot = low + (high - low) / 2;
            if (nums[pivot] < nums[high]) {
                high = pivot;
            }
            else if (nums[pivot] > nums[high]) {
                low = pivot + 1;
            }
            else {
                high -= 1;
            }
        }
        return nums[low];
    }
};

//c3
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> map2;
        if (nums1.size() > nums2.size()) {
            return intersect(nums2, nums1);
        }//应该存较短的到哈希
        vector<int> res;
        for(int i=0;i<nums2.size();++i)
        {
            map2[nums2[i]]++;
        }
        for(auto num:nums1)
        {
            if(map2.count(num)&&map2[num]>0)
            {
                map2[num]--;
                res.push_back(num);
            }
        }
        return res;
    }
};

//有序的情况（排序+双指针）
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        vector<int> res;
        int i = 0, j = 0;
        while(i < nums1.size() && j < nums2.size())
            if(nums1[i] < nums2[j]) i ++;
            else if(nums1[i] > nums2[j]) j ++;
            else {
                res.push_back(nums1[i]);
                i ++, j ++;
            }
        return res;
    }
};

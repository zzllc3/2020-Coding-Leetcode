//bfs
class Solution {
public:
    // 从beginWord开始转换，直到endWord，最终构成构成一个无向有环图。
    //                 hit
    //                  |
    //                 hot
    //                /   \
    //              dot -- lot
    //             /       |
    //            dog      |
    //            |  \    /
    //            |   log
    //            |  /
    //            cog
    //
    // 我们可以将图中某些重复结点的边去掉，以减少重复计算，因为我们只会选择先
    // 变换得到的单词，后续重复生成的相同单词的 路径长度肯定要  相同或更大，直接
    // 跳过不影响最终的结果，最终上图可以转换成下图。
    //
    //                 hit
    //                  |
    //                 hot
    //                /   \
    //              dot   lot
    //             /       |
    //            dog     log
    //             |      /
    //             \     /
    //               cog
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int word_size = wordList[0].length(), list_size = wordList.size();
        // 构建 转换树，某个结点的孩子结点为一个集合，包含了所有能够进行一次转换得到的有效单词。
        // 按层从beginWord开始构建多叉树，直到遇到endWord，此时的层高+1即为最短路径。
        vector<set<string>> levels(list_size + 1, set<string>()); //树最高不超过字典长度
        vector<int> flags(list_size, 0);// 标记数组，用于标记哪些单词已经被 选择
        levels[0].insert(beginWord);
        for (int i = 0; i < levels.size(); i++) { // 尝试添加下一层的有效单词
            for (auto it = levels[i].begin(); it != levels[i].end(); it++) { // 遍历当前层的每一个单词
                // 从字典中选择能够进行一次字母转换，而得到的单词
                for (int k= 0; k < list_size; k++) { 
                    if (flags[k] == 1) continue;
                    int l = 0, cnt = 0;
                    while (l < word_size && cnt <= 1) {
                        if ((*it)[l] != wordList[k][l]) cnt++;
                        l++;
                    }
                    if (cnt == 1) {
                        flags[k] = 1;
                        levels[i+1].insert(wordList[k]);
                        // 此时，得到最小层数，直接return
                        if (wordList[k] == endWord) return i + 2;
                    }
                }
            }
        }
        return 0;
    }
};


//bfs
class Solution{
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList){
        //加入所有节点，访问过一次，删除一个。
        unordered_set<string> s;
        for (auto &i : wordList) s.insert(i);

        queue<pair<string, int>> q;
        //加入beginword
        q.push({beginWord, 1});

        string tmp; //每个节点的字符
        int step;    //抵达该节点的step

        while ( !q.empty() ){
            if ( q.front().first == endWord){
                return (q.front().second);
            }
            tmp = q.front().first;
            step = q.front().second;
            q.pop();

            //寻找下一个单词了
            char ch;
            for (int i = 0; i < tmp.length(); i++){
                ch = tmp[i];
                for (char c = 'a'; c <= 'z'; c++){
                    //从'a'-'z'尝试一次
                    if ( ch == c) continue;
                    tmp[i] = c ;
                    //如果找到的到
                    if (  s.find(tmp) != s.end() ){
                        q.push({tmp, step+1});
                        s.erase(tmp) ; //删除该节点
                    }
                tmp[i] = ch; //复原
                }
               
            }
        }
        return 0;
    }
};

//双向bfs
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {

        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end() ) return 0;
        // 初始化起始和终点
        unordered_set<string> beginSet, endSet, tmp, visited;
        beginSet.insert(beginWord);
        endSet.insert(endWord);
        int len = 1;

        while (!beginSet.empty() && !endSet.empty()){
            if (beginSet.size() > endSet.size()){
                tmp = beginSet;
                beginSet = endSet;
                endSet = tmp;
            }
            tmp.clear();
            for ( string word : beginSet){
                for (int i = 0; i < word.size(); i++){
                    char old = word[i];
                    for ( char c = 'a'; c <= 'z'; c++){
                        if ( old == c) continue;
                        word[i] = c;
                        if (endSet.find(word) != endSet.end()){
                            return len+1;
                        }
                        if (visited.find(word) == visited.end() && dict.find(word) != dict.end()){
                            tmp.insert(word);
                            visited.insert(word);
                        }
                    }
                    word[i] = old;
                }
            }
            beginSet = tmp;
            len++;
            

        }
        return 0;
    }
};


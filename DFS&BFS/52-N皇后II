//回溯
class Solution {
public:
    vector<vector<string>> res;   
    int totalNQueens(int n) {
        vector<string> board(n,string(n,'.'));
        backtrace(board,0);
        return res.size();
    }
    // 路径：board 中小于 row 的那些行都已经成功放置了皇后
    // 选择列表：第 row 行的所有列都是放置皇后的选择
    // 结束条件：row 超过 board 的最后一行
    void backtrace(vector<string>& board, int row){
        if(row == board.size()){
            res.push_back(board);
            return;
        }
        int n=board[row].size();//列
        for(int col=0; col<n; col++){
            //排除不合法选择
            if(!isValid(board,row,col)) continue;
            //做选择
            board[row][col]='Q';
            //进入下一行决策
            backtrace(board,row+1);
            //撤销选择
            board[row][col]='.';
        }
    }

    bool isValid(vector<string>& board, int row, int col){
        int n=board.size();
        //检查列是否有皇后冲突
        for(int i=0;i<n;++i){//正上方
            if(board[i][col] == 'Q')
                return false;
        }
        //检查右上方
        for(int i=row-1,j=col+1; i>=0 && j<n; i--,j++){
            if(board[i][j] == 'Q') return false;
        }
        //检查左上方
        for(int i=row-1,j=col-1; i>=0 && j>=0; i--,j--){
            if(board[i][j] == 'Q') return false;
        }
        return true;
    }
};


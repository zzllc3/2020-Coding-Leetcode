//c3递归
class Solution {
public:
    vector<vector<int>> floodFillCore(vector<vector<int>>& image, int sr, int sc, int wait2change, int newColor) {
        if(image[sr][sc]==wait2change)
        {
            image[sr][sc] = newColor;
            if(sr-1>=0)
                floodFillCore(image, sr-1, sc, wait2change, newColor);
            if(sr+1<=image.size()-1)
                floodFillCore(image, sr+1, sc, wait2change, newColor);
            if(sc-1>=0)
                floodFillCore(image, sr, sc-1, wait2change, newColor);
            if(sc+1<=image[0].size()-1)
                floodFillCore(image, sr, sc+1, wait2change, newColor);
        }
        return image;
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int wait2change = image[sr][sc];
        if(wait2change==newColor)
            return image;
        else
            return floodFillCore(image, sr, sc, wait2change,newColor);
    }
};

//bfs
class Solution {
public:
    const int dx[4] = {1, 0, 0, -1};
    const int dy[4] = {0, 1, -1, 0};
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int currColor = image[sr][sc];
        if (currColor == newColor) return image;
        int n = image.size(), m = image[0].size();
        queue<pair<int, int>> que;
        que.emplace(sr, sc);
        image[sr][sc] = newColor;
        while (!que.empty()) {
            int x = que.front().first, y = que.front().second;
            que.pop();
            for (int i = 0; i < 4; i++) {
                int mx = x + dx[i], my = y + dy[i];
                if (mx >= 0 && mx < n && my >= 0 && my < m && image[mx][my] == currColor) {
                    que.emplace(mx, my);
                    image[mx][my] = newColor;
                }
            }
        }
        return image;
    }
};

//dfs
class Solution {
public:
    const int dx[4] = {1, 0, 0, -1};
    const int dy[4] = {0, 1, -1, 0};
    void dfs(vector<vector<int>>& image, int x, int y, int color, int newColor) {
        if (image[x][y] == color) {
            image[x][y] = newColor;
            for (int i = 0; i < 4; i++) {
                int mx = x + dx[i], my = y + dy[i];
                if (mx >= 0 && mx < image.size() && my >= 0 && my < image[0].size()) {
                    dfs(image, mx, my, color, newColor);
                }
            }
        }
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int currColor = image[sr][sc];
        if (currColor != newColor) {
            dfs(image, sr, sc, currColor, newColor);
        }
        return image;
    }
};

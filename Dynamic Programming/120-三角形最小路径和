//当前行当前列的可能性
class Solution {
public:
int minimumTotal(vector<vector<int>>& triangle) {
        //构造二维dp表，自顶向下动态规划
        //表达式为：dp[i][j]=min(dp[i-1][j-1]+tri[i][j],dp[i-1][j]+tri[i][j])如果上一行有j的话
        int len = triangle.size();
        if (len == 1)return triangle[0][0];
        vector<vector<int>>dp(len, vector<int>(len,0x3f3f3f3f));
        dp[0][0] = triangle[0][0];
        for (int i = 1; i < len; i++) {
            for (int j = 0; j <= i; j++) {
                if (j == 0) {
                    dp[i][j] = dp[i - 1][j] + triangle[i][j];
                }
                else if (j == i) {
                    dp[i][j] = dp[i - 1][j - 1] + triangle[i][j];

                }
                else {
                    dp[i][j] = min(dp[i - 1][j - 1] + triangle[i][j], dp[i - 1][j] + triangle[i][j]);
                }
            }
        }
        sort(dp[len - 1].begin(), dp[len - 1].end());
        return dp[len - 1][0];
    }
};

//动态规划，自底向上，从倒数第二层开始向上求解
//状态转移方程为：triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1])
//时间复杂度为O(m*n)，空间复杂度为O(1)
class Solution {
public:

int minimumTotal(vector<vector<int>>& triangle) {
        for(int i=triangle.size()-2;i>=0;--i){
            for(int j=0;j<triangle[i].size();++j){//每个点的路径和等于该点的值加上它正下面和右下中较小点的值
                triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1]);
            }
        }
        return triangle[0][0];
    }
};

//降维变为一维dp，自底向上，因为其实每次只会用到上一层数据，因此不需二维数组存储所有可能情况来进行比较
//也就是说一维dp[j]是随着i进行覆盖更新上一层的dp[j]
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle){
        int n=triangle.size(),dp[n+1];
        memset(dp,0,sizeof(dp));
        for(int i=n-1;i>=0;--i){
            for(int j=0;j<=i;++j){//第i层只有i列
                dp[j]=min(dp[j],dp[j+1])+triangle[i][j];
            }
        }
        return dp[0];
    }
};

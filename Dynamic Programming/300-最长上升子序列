//动态规划
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size()<=0)
            return 0;
        vector<int> dp(nums.size(),1);
        for(int i=0;i<nums.size();++i)
        {
            for(int j=0;j<i;++j)
            {
                if(nums[i]>nums[j])
                    dp[i] = max(dp[i],dp[j]+1);
            }
        }
        int max = 0;
        for(int i=0;i<nums.size();++i)
        {
            if(dp[i]>max)
                max = dp[i];
        }
        return max;
    }
};

//贪心+二分
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int len = 1;
        if (nums.size() == 0) 
            return 0;
        vector<int> d(nums.size() + 1, 0);//d[i]表示长度为i的上升子序列结尾元素的最小值，贪心可证d[i]单调递增
        d[len] = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > d[len]) 
                //直接加在后面
                d[++len] = nums[i];
            else{
                int l = 1, r = len, pos = 0; 
                // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0
                //找到d中第一个>=nums[i]的位置，用nums[i]更新
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (d[mid] < nums[i]) {
                        pos = mid;
                        l = mid + 1;
                    }
                    else r = mid - 1;
                }
                d[pos + 1] = nums[i];
            }
        }
        return len;
    }
};

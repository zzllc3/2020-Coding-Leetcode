//动态规划,自底向上
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,amount+1);
        dp[0] = 0;//dp 数组的定义：当目标金额为 i 时，至少需要 dp[i] 枚硬币凑出。
        for(int i=0;i<=amount;++i)
        {
            for(int coin:coins)
            {
                if(i-coin<0)
                    continue;
                dp[i] = min(dp[i],1+dp[i-coin]);
            }
        }
        if(dp[amount]==amount+1)
            return -1;
        else
            return dp[amount];
    }
};

//回溯(超时)
class Solution {
    int backtrack(int idxCoin, vector<int>& coins, int amount) {
        if (amount == 0) 
            return 0;
            
        if (idxCoin < coins.size() && amount > 0) {
            int maxVal = amount / coins[idxCoin];
            int minCost = INT_MAX;
            for (int x = 0; x <= maxVal; x++) {
                if (amount >= x * coins[idxCoin]) {
                    int res = backtrack(idxCoin + 1, coins, amount - x * coins[idxCoin]);
                    if (res != -1) 
                        minCost = min(minCost, res + x);
                }
            }
            return minCost == INT_MAX ? -1: minCost;
        }
        return -1;
    }
public:
    int coinChange(vector<int>& coins, int amount) {
        return backtrack(0, coins, amount);
    }
};

//贪心+dfs剪枝
class Solution {
public:
    void coinChange(vector<int>& coins, int amount, int c_index, int count, int& ans)
    {
        if (amount == 0)
        {
            ans = min(ans, count);
            return;
        }
        if (c_index == coins.size()) 
            return;

        for (int k = amount / coins[c_index]; k >= 0 && k + count < ans; k--)
        {
            coinChange(coins, amount - k * coins[c_index], c_index + 1, count + k, ans);
        }
    }

    int coinChange(vector<int>& coins, int amount)
    {
        if (amount == 0) return 0;
        sort(coins.rbegin(), coins.rend());
        int ans = INT_MAX;
        coinChange(coins, amount, 0, 0, ans);
        return ans == INT_MAX ? -1 : ans;
    }
};

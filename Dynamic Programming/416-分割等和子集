//动态规划，背包问题变形
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int num :nums)
            sum += num;
        if(sum%2!=0)
            return false;
        sum = sum/2;
        //dp[i][j] = x 表示，对于前 i 个物品，当前背包的容量为 j 时，
        //若 x 为 true，则说明可以恰好将背包装满，若 x 为 false，则说明不能恰好将背包装满。
        vector<vector<bool>> dp(nums.size()+1,vector<bool>(sum+1,false));
        // base case
        //dp[..][0] = true 和 dp[0][..] = false
        for (int i = 0; i <= nums.size(); i++)
            dp[i][0] = true;
        for(int i=1;i<=nums.size();++i)
        {
            for(int j=1;j<=sum;++j)
            {
                if (j - nums[i - 1] < 0) 
               // 背包容量不足，不能装入第 i 个物品
                    dp[i][j] = dp[i - 1][j]; 
                else
                // 装入或不装入背包
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j-nums[i-1]];  
            }
        }
        return dp[nums.size()][sum];
    }
};

//动态规划，状态压缩，背包问题变形
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int num :nums)
            sum += num;
        if(sum%2!=0)
            return false;
        sum = sum/2;
        vector<bool> dp(sum+1,false);
        //dp[j] 其实就相当于 dp[i-1][j]
        dp[0] = true;
        for (int i = 0; i < nums.size(); i++)
        {
            for (int j = sum; j >= 0; j--)
            {
                //需要注意的是 j 应该从后往前反向遍历，因为每个物品（数字）只能用一次，以免之前的结果影响其他的结果。
                if (j - nums[i] >= 0) 
                    dp[j] = dp[j] || dp[j - nums[i]];
            }
        }
        return dp[sum];
    }
};

//DFS+剪枝
class Solution {
public:
    bool DFS(int target,vector<int>& nums,int j)
    {
        if(target==0)
            return true;
        if(j==nums.size())
            return false;
        if(target<0)
            return false;
        return DFS(target-nums[j],nums,j+1)||DFS(target,nums,j+1);
    }
    bool canPartition(vector<int>& nums) {
         int sum=accumulate(nums.begin(),nums.end(),0);
         sort(nums.rbegin(),nums.rend());
         int target=sum/2;
         if(sum%2==1)
             return false;
         if(nums[0]>target)
             return false;
         if(nums[0]==target)
             return true;
         return DFS(target,nums,0);
    }
};

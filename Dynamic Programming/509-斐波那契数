//动态规划，自底向上
class Solution {
public:
    int fib(int N) {
        vector<int> dp;
        dp.push_back(0);
        dp.push_back(1);
        for(int i=2;i<=N;++i)
        {
            dp.push_back(dp[i-1] + dp[i-2]);
        }
        return dp[N];
    }
};

//动态规划，自底向上,状态压缩
class Solution {
public:
    int fib(int N) {
        if(N==0)
            return 0;
        if(N==1)
            return 1;
        int prepre = 0,pre = 1;
        for(int i=2;i<=N;++i)
        {
            int sum = pre+prepre;
            prepre = pre;
            pre = sum;
        }
        return pre;
    }
};

//动态规划，自顶向下
class Solution {
public:
    int fib(int N) {
        if(N<1)
            return 0;
        vector<int> memo(N+1,0);
        return help(memo,N);
    }
    int help(vector<int>& memo, int n)
    {
        if(n==1||n==2)
            return 1;
        if(memo[n]!=0)
            return memo[n];
        memo[n] = help(memo, n-1) + help(memo,n-2);
        return memo[n];
    }
};

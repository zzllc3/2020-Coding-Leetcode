//动态规划-完全背包
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1,0));
        //若只使用前 i 个物品，当背包容量为 j 时，有 dp[i][j] 种方法可以装满背包。
        //base:dp[0][..] = 0， dp[..][0] = 1
        for(int i=0;i<=coins.size();++i)
        {
            dp[i][0] = 1;
        }
        for(int i=1;i<=coins.size();++i)
        {
            for(int j=1;j<=amount;++j)
            {
                if(j-coins[i-1]<0)
                    dp[i][j] = dp[i-1][j];//无法放入
                else
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]];//不放+放情况之和
            }
        }
        return dp[coins.size()][amount];
    }
};

//动态规划，状态压缩-完全背包
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount+1,0);
        dp[0] = 1;
        for(int i=0;i<coins.size();++i)
        {
            for(int j=1;j<=amount;++j)
            {
                if(j-coins[i]>=0)
                    dp[j] = dp[j] + dp[j-coins[i]];//不放+放情况之和
            }
        }
        return dp[amount];
    }
};

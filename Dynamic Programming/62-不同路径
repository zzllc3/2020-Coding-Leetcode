//dp自底向上
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m<1||n<1)
            return 0;
        vector<vector<int>> dp(n+1,vector<int>(m+1));
        for(int i=0;i<=m;i++)
            dp[1][i] = 1;
        for(int i=0;i<=n;i++)
            dp[i][1] = 1;
        for(int i=2;i<=n;++i)
        {
            for(int j=2;j<=m;++j)
            {
                dp[i][j] = dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[n][m];
    }
};

//自顶向下
static int a[101][101]={0};//记录已经计算过的路径，大大提高效率
class Solution{
	public:
		int uniquePaths(int m, int n){
			if(m <= 0 || n <= 0)
				return 0;
			else if(m == 1  || n == 1)
				return 1;
			else if(m == 2 && n == 2)
				return 2;
			else if((m == 3 && n == 2) || (m == 2 && n == 3))
				return 3;
			if(a[m][n] > 0)
				return a[m][n];
			a[m-1][n] =  uniquePaths(m-1,n);
			a[m][n-1] =  uniquePaths(m,n-1);
			a[m][n] = a[m-1][n]+a[m][n-1];
			return a[m][n];
		}
};

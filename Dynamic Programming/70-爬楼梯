//dp表（自底向上）
class Solution {
public:
    int climbStairs(int n) {
        if(n<1)
            return 0;
        vector<int> dp(n+1,0);
        if(n==1)
            return 1;
        else if(n==2)
            return 2;
        else
        {
            dp[1]=1;
            dp[2]=2;
            if(n>=3)
            for(int i=3;i<=n;++i)
            {
                dp[i] = dp[i-1]+dp[i-2];
            }
            return dp[n];
        }
    }
};

//备忘录（自顶向下）
class Solution {
public:
    int climbStairs(int n) {
        if(n<1)
            return 0;
        vector<int> memo(n+1,0);
        return helper(memo,n);
    }
    int helper(vector<int>& memo, int n)
    {
        if(n==1)
            return 1;
        if(n==2)
            return 2;
        if(memo[n]!=0)
            return memo[n];
        memo[n] = helper(memo,n-1)+helper(memo,n-2);
        return memo[n];
    }
};

//c3
class Solution {
public:
    vector<int> exchange(vector<int>& nums) {
        int l=0,r=nums.size()-1;
        while(l<r)
        {
            if(nums[l]%2==0&&nums[r]%2==1)
            {
                swap(nums[l],nums[r]);
                ++l;
                --r;
            }
            else if(nums[l]%2==1&&nums[r]%2==1)
                ++l;
            else if(nums[l]%2==0&&nums[r]%2==0)
                --r;
            else
            {
                ++l;
                --r;
            }
        }
        return nums;
    }
};

//首尾双指针
class Solution {
public:
    vector<int> exchange(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        while (left < right) {
            if ((nums[left] & 1) != 0) {
                left ++;
                continue;
            }
            if ((nums[right] & 1) != 1) {
                right --;
                continue;
            }
            swap(nums[left++], nums[right--]);
        }
        return nums;
    }
};

//快慢双指针
class Solution {
public:
    vector<int> exchange(vector<int>& nums) {
        int low = 0, fast = 0;
        while (fast < nums.size()) {
            if (nums[fast] & 1) {
                swap(nums[low], nums[fast]);
                low ++;
            }
            fast ++;
        }
        return nums;
    }
};

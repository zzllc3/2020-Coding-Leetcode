/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

//c3
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* H = new ListNode();
        ListNode* Head = H;
        while(l1!=nullptr&&l2!=nullptr)
        {
            if(l1->val<l2->val)
            {
                H->next = l1;
                l1 = l1->next;
                H = H->next;
            }
            else
            {
                H->next = l2;
                l2 = l2->next;
                H = H->next;
            }
        }
        if(l1==nullptr)
        {
            H->next = l2;
        }
        else
        {
            H->next = l1;
        }
        return Head->next;
    }
};

//优美的
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode *dummy = new ListNode(INT_MAX);
        ListNode *res = dummy;
        while(l1 && l2)
        {
            if(l1 -> val < l2 -> val)
            {
                res -> next = l1;
                l1 = l1 -> next;
            }
            else
            {
                res -> next = l2;
                l2 = l2 -> next;
            }
            res = res -> next;
        }
        res -> next = l1 ? l1 : l2; // 当有一条链表遍历到头，while循环退出之后，pos->next应指向尚未遍历完的那条链表
        return dummy -> next;
    }
};

//递归
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        if(l1 -> val < l2 -> val)
        {
            l1 -> next = mergeTwoLists(l1 -> next, l2);
            return l1;
        }
        else
        {
            l2 -> next = mergeTwoLists(l1, l2 -> next);
            return l2;
        }
    }
};

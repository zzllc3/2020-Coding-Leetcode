//c3
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
public:
    vector<Node*> res;
    void inorder(Node* root)
    {
        if(root)
        {
            inorder(root->left);
            res.push_back(root);
            inorder(root->right);
        }
    }
    Node* treeToDoublyList(Node* root) {
        if(!root)
            return root;
        inorder(root);
        res[0]->left = res.back();
        res.back()->right = res[0];
        if(res.size()>1)
        {
            res[0]->right = res[1];
            res.back()->left = res[res.size()-2];
        }
        for(int i=1;i<res.size()-1;++i)
        {
            res[i]->left = res[i-1];
            res[i]->right = res[i+1];
        }
        return res[0];
    }
};

//优化
class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if (root == NULL)
            return NULL;
        // vector中安装中序遍历顺序保存了所有的node
        vector<Node*> nodes;

        inorderTraverse(root, nodes);

        int n = nodes.size();
        for (int i = 0; i < n; i++) {
            // (i + n - 1) % n 避免第一个结点的index 0 减1出现负数
            nodes[i]->left = nodes[(i + n - 1) % n];
            // (i + 1) % n 是为了避免最后一个结点 + 1越界
            nodes[i]->right = nodes[(i + 1) % n];
        }
        return nodes[0];
    }

    void inorderTraverse(Node *root, vector<Node *> &nodes) {
        if (root == NULL)
            return;
        inorderTraverse(root->left, nodes);
        nodes.push_back(root);
        inorderTraverse(root->right, nodes);
    }
};


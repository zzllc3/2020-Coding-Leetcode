class Solution {
public:
    vector<string> res;
    vector<string> permutation(string s) {
        string track = "";
        vector<bool> visited(s.size(),false);
        sort(s.begin(),s.end());//使相同的字母相邻
        backtrack(s,res,track,visited);
        return res;
    }
    void backtrack(string s, vector<string>& res, string& track, vector<bool>& visited)
    {
        //结束
        if(track.size()==s.size())
            res.push_back(track);
        for(int i=0;i<s.size();++i)
        {
            //不合法
            if(visited[i])
                continue;
            if(i > 0 && !visited[i-1] && s[i-1] == s[i])//去重复
                continue;

            visited[i] = true;
            track.push_back(s[i]);
            // 进入下一次决策树
            backtrack(s, res, track, visited);
            // 撤销选择
            track.pop_back();
            visited[i] = false;
        }
    }
};


//双指针
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res = 0;
        int head=0,tail = 0;
        map<char,int> mt;
        while(tail<s.size())
        {
            if(mt.find(s[tail])!=mt.end())
            {
                head = max(head,mt[s[tail]]+1);
            }
            mt[s[tail]] = tail;
            tail++;
            res = max(res,tail-head);
        }
        return res;
    }
};

//队列
    public int lengthOfLongestSubstring(String s) {
        //用链表实现队列，队列是先进先出的
        Queue<Character> queue = new LinkedList<>();
        int res = 0;
        for (char c : s.toCharArray()) {
            while (queue.contains(c)) {
                //如果有重复的，队头出队
                queue.poll();
            }
            //添加到队尾
            queue.add(c);
            res = Math.max(res, queue.size());
        }
        return res;
    }

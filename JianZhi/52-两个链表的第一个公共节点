/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //双栈
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        stack<ListNode*> s1;
        stack<ListNode*> s2;
        while(headA!=nullptr)
        {
            s1.push(headA);
            headA = headA->next;
        }
        while(headB!=nullptr)
        {
            s2.push(headB);
            headB = headB->next;
        }
        ListNode *res = nullptr;
        while(!s1.empty()&&!s2.empty()&&s1.top()==s2.top())
        {
            res = s1.top();
            s1.pop();
            s2.pop();
        }
        return res;
    }
};

//无栈
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *Long  = headA;
        ListNode *Short  = headB;
        int longc3 = 0;
        int shortc3 = 0;
        while(Long!=nullptr)
        {
            longc3++;
            Long = Long->next;
        }
        while(Short!=nullptr)
        {
            shortc3++;
            Short = Short->next;
        }

        int dif = longc3-shortc3;
        if(dif<0)
        {
            ListNode *temp = headB;
            headB = headA;
            headA = temp;
            dif = shortc3 - longc3;
        }
        // while(dif--)
        // {
        //     Long = Long->next;
        // }
        for(int i=0;i<dif;++i)
        {
            headA = headA->next;
        }
        while(headA!=nullptr&&headB!=nullptr&&headA!=headB)
        {
            headA = headA->next;
            headB = headB->next;
        }
        return headA;
    }
};

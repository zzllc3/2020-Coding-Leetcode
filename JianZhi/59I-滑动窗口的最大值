//c3垃圾的一批
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        if(k==1)
            return nums;
        for(int i=0;i<nums.size();++i)
        {
            bool ok = false;
            int maxc3 = nums[i];
            for(int j=1;j<k;++j)
            {
                if(i+j>=nums.size())
                    break;
                if(nums[i+j]>maxc3)
                {
                    maxc3 = nums[i+j];
                } 
                if(j==k-1)
                    ok = true;
            }
            if(ok)
                res.push_back(maxc3);
        }
        return res;
    }
};

//单调队列
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;    //用来存结果的vector
        deque<int> tem;     
        
        for(int i=0; i<nums.size(); ++i)
        {
            while(!tem.empty() && nums[i]>nums[tem.back()])
            {   //while这步操作是为了让当前窗口最大值的索引值放到tem的队头，后面小的没有用，弹走
                tem.pop_back();
            }
            if(!tem.empty() && tem.front()<i-k+1) 
                tem.pop_front();
            //是否在滑窗内

            tem.push_back(i);

            if(i>=k-1)  
                res.push_back(nums[tem.front()]);
        }
        return res;
    }
};

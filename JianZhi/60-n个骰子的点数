//递归，很多重复计算,超时
class Solution {
public:
    void ProbC3(vector<double>& res,int n,int cur,int dian)//cur当前第几个骰子
    {
        if(cur==1)//最后一个
            res[dian-n]++;
        else
        {
            for(int i=1;i<=6;++i)//下一个骰子6点
            {
                ProbC3(res,n,cur-1,i+dian);
            }    
        }
    }

    vector<double> twoSum(int n) {
        if(n<1)
            return {};
        vector<double> res(6*n-n+1,0);//6n-n+1种可能取值（最大6n，最小n）
        for(int i=1;i<=6;++i)//每个骰子6点
        {
            ProbC3(res,n,n,i);
        }
        for(int i=0;i<res.size();++i)
        {
            res[i] /= pow(6,n);
        }
        return res;
    }
};

//动态规划
class Solution {
public:
    vector<double> twoSum(int n) {
        int dp[15][70];//第一维骰子次数，第二维点数，最多11次
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i <= 6; i ++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i ++) {
            for (int j = i; j <= 6*i; j ++) {
                for (int cur = 1; cur <= 6; cur ++) {
                    if (j - cur <= 0) {
                        break;
                    }
                    dp[i][j] += dp[i-1][j-cur];//对应前一次i-1的j-1到j-6
                }
            }
        }
        int all = pow(6, n);
        vector<double> ret;
        for (int i = n; i <= 6 * n; i ++) {
            ret.push_back(dp[n][i] * 1.0 / all);
        }
        return ret;
    }
}; 

//dp优化
class Solution {
public:
    vector<double> twoSum(int n) {
        int dp[70];
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i <= 6; i ++) {
            dp[i] = 1;
        }
        for (int i = 2; i <= n; i ++) {
            for (int j = 6*i; j >= i; j --) {
                dp[j] = 0;
                for (int cur = 1; cur <= 6; cur ++) {
                    if (j - cur < i-1) {
                        break;
                    }
                    dp[j] += dp[j-cur];
                }
            }
        }
        int all = pow(6, n);
        vector<double> ret;
        for (int i = n; i <= 6 * n; i ++) {
            ret.push_back(dp[i] * 1.0 / all);
        }
        return ret;
    }
};
//链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/solution/nge-tou-zi-de-dian-shu-dong-tai-gui-hua-ji-qi-yo-3/

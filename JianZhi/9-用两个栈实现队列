//c3
class CQueue {
public:
    stack<int> s1;
    stack<int> s2;
    CQueue() {
    }
    
    void appendTail(int value) {
        if(s1.empty())
            s1.push(value);
        else
        {
            while(!s1.empty())
            {
                s2.push(s1.top());
                s1.pop();
            }
            s1.push(value);
            while(!s2.empty())
            {
                s1.push(s2.top());
                s2.pop();
            }
        }
    }
    
    int deleteHead() {
        if(s1.empty()&&s2.empty())
            return -1;
        else
        {
            int res = s1.top();
            s1.pop();
            return res;
        }
    }
};


//简化
class CQueue {
private:
    stack<int> stack1, stack2;
public:
    CQueue() {}
    
    void appendTail(int value) {
        stack1.push(value);
    }
    
    int deleteHead() {
        // 明确一点，题目要求queue弹出的元素，是stack1最下面的元素，也是stack2最上面的元素
        int res = 0;
        if(!stack2.empty())
        {
            // 如果stack2不是空的，那么其最上面的元素就是要被弹出的
            res = stack2.top();
            stack2.pop();
        }
        else if(!stack1.empty())
        {
            // 如果stack2已经空了，把stack1的元素压过去，然后弹出stack2最上面的元素
            while(!stack1.empty())
            {
                stack2.push(stack1.top());
                stack1.pop();
            } 
            res = stack2.top();
            stack2.pop();
        }
        else return -1; // 如果stack1和2都是空的，返回-1
        return res;
    }
};


//暴力
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
              for(int j=i+1;j<nums.size();j++){
                  if(nums[i]+nums[j]==target){
                      ans.push_back(i);
                      ans.push_back(j);
                      return ans;
                  }
              }
        }
        return ans;
    }
};

//两遍哈希
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

        unordered_map<int,int> m;

        for(int i = 0; i<nums.size(); i++)
            m[nums[i]] = i;         //向map中添加元素
        
        for(int i = 0; i<nums.size(); i++)
        {
            if(m.find(target-nums[i]) != m.end() && m[target-nums[i]] != i)  //如果m中存在对应的键值，且不为i
                return {i, m[target-nums[i]]};
        }
        return {};
    }
};

//一遍哈希
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

        unordered_map<int,int> m;
        
        for(int i = 0; i < nums.size(); i++)
        {
            if(m.find(target-nums[i]) != m.end())      //m中存在对应的键值
                return {m[target-nums[i]], i};        
            //  m[target-nums[i]]为已经加入map的元素的索引，所以小于本轮循环中的i，放在前面

            m[nums[i]] = i;       //向map中添加元素
        }
        return {};
    }
};

//排序+双指针
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        vector<int> temp;
        temp=nums;
        sort(temp.begin(),temp.end());
        int i=0,j=temp.size()-1;
        //排序后下标
        while(i<j)
        {  
            if(temp[i]+temp[j]>target)j--;
            else if(temp[i]+temp[j]<target)i++;
            else break; 
        }
        //原始下标
        if(i<j)
        {
            for(int k=0;k<temp.size();k++)
            {
                if(i<temp.size()&&nums[k]==temp[i]){
                    ans.push_back(k);
                    i=temp.size();
                }
                else if(j<temp.size()&&nums[k]==temp[j]){
                    ans.push_back(k);
                    j=temp.size();
                }
                if(i==temp.size()&&j==temp.size())
                    return ans;
            }
        }
        return ans;
    }
};

//c3暴力超时
class Solution {
public:
    int countPrimes(int n) {
        int result = 0;
        for(int i=2;i<n;++i)
        {
            bool zhishu = true;
            for(int j=2;j<i;++j)
            {
                if(i%j==0)
                {
                    zhishu = false;
                    break;
                }
            }
            if(zhishu)
                result++;
        }
        return result;
    }
};

//暴力改进1
class Solution {
public:
    int countPrimes(int n) {
        int result = 0;
        for(int i=2;i<n;++i)
        {
            bool zhishu = true;
            for(int j=2;j*j<=i;++j)//如果在 [2,sqrt(n)] 这个区间之内没有发现可整除因子，就可以直接断定 n 是素数了
            {
                if(i%j==0)
                {
                    zhishu = false;
                    break;
                }
            }
            if(zhishu)
                result++;
        }
        return result;
    }
};

//排除
class Solution {
public:
    int countPrimes(int n) {
        // 将数组都初始化为 true
        vector<bool> isPrim(n, true);

        for (int i = 2; i*i < n; i++) 
            if (isPrim[i]) 
                // i 的倍数不可能是素数了
                for (int j = i * i; j < n; j += i) 
                        isPrim[j] = false;
        
        int count = 0;
        for (int i = 2; i < n; i++)
            if (isPrim[i]) 
                count++;
        return count;
    }
};

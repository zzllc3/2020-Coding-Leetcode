//c3
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        vector<int> list;
        for(int i=0;i<matrix.size();++i)
        {
            for(int j=0;j<matrix[0].size();++j)
            {
                list.push_back(matrix[i][j]);
            }
        }
        sort(list.begin(),list.end());
        return list[k-1];
    }
};

//小顶堆
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        struct point {
            int val, x, y;
            point(int val, int x, int y) : val(val), x(x), y(y) {}
            bool operator> (const point& a) const { return this->val > a.val; }
        };
        priority_queue<point, vector<point>, greater<point>> que;
        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            que.emplace(matrix[i][0], i, 0);
        }
        for (int i = 0; i < k - 1; i++) {
            point now = que.top();
            que.pop();
            if (now.y != n - 1) {
                que.emplace(matrix[now.x][now.y + 1], now.x, now.y + 1);
            }
        }
        return que.top().val;
    }
};

//二分
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        long long l = matrix[0][0], r = matrix[n-1][n-1];
        while (l < r) {
            long long mid = l + r >> 1;
            int cnt = 0, i = n - 1, j = 0;
            while (i >= 0 && j < n) {  // 统计矩阵中小于等于mid的元素个数
                if (matrix[i][j] <= mid) {
                    cnt += i + 1;
                    j ++;//向右
                } else {
                    i --;//向上
                }
            }
            if (cnt < k) 
                l = mid + 1;
            else 
                r = mid;
        }
        return l;
    }
};

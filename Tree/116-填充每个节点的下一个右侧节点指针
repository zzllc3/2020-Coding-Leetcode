/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

//O(N)
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)   return root;
        queue<Node*> q;
        Node* flag = new Node; // 用于记录每层树的结束。
        Node* last = new Node; // 用于记录上一个节点，将上一个节点的next连接当前节点。

        q.push(root); // 根推入队列
        q.push(flag); // 第一层结束，用flag标记位置
        while(q.size() >= 2){ //队列内到最后存在一个flag，因此 >2
            Node* now = q.front(); // 取出当前节点。
            q.pop();
            if(now == flag){ // 如果到达每层末尾，last清空，再次推入flag
                //last -> next = NULL;
                last = NULL;
                q.push(flag);
                continue;
            }
            if(last == NULL){ // 说明是新的一层
                last = now; 
            }
            else{ // 否则一定存在last节点
                last -> next = now;
                last = now; // 更新last节点
            }
            if(now -> left){ //压入新的节点(因为是完美二叉树)。
                q.push(now -> left);
                q.push(now -> right);
            }
        }
        return root; 
    }
};


//O(1)
class Solution {
public:
    Node* connect(Node* root) {
        if(!root)   return NULL;
        Node* now = new Node;
        Node* leftmost = new Node;
        now = root;
        leftmost = root;
        while(now -> left){
            now -> left -> next = now -> right; // 当前节点的左节点的next指向右节点
            if(now -> next){ //将当前节点的右节点的next指向 下一节点的左节点
                now -> right -> next = now -> next -> left;
                now = now -> next; // 更新当前节点
            }
            else{
                now = leftmost -> left; // 若当前节点没有next，更新当前节点为当前层的最左节点的左节点。
                leftmost = now;
            }
        }
        return root;
    }
};

//拉链法
class Solution {
public:
    Node* connect(Node* root) {
        if(!root || !root -> left)   
            return root;
        root -> left -> next = root -> right;
        Node* now = new Node;
        now = root -> left;
        while(now -> left){
            now -> right -> next = now -> next -> left;
            now = now -> right;
        }
        root -> left = connect(root -> left);
        root -> right = connect(root -> right);
        return root;
    }
};

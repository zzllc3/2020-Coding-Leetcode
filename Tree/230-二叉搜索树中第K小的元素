/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //c3
// class Solution {
// public:
//     void dfs(TreeNode* root, vector<int>& result)
//     {
//         if(root)
//         {
//             dfs(root->left,result);
//             result.push_back(root->val);
//             dfs(root->right,result);
//         }
//     }
//     int kthSmallest(TreeNode* root, int k) {
//         vector<int> result;
//         dfs(root, result);
//         return result[k-1];
//     }
// };

//改进
class Solution {
private: int result;
private: int count;
public:
    void dfs(TreeNode* root, int k, bool find)
    {
        if(root==nullptr|| find)
            return;
        dfs(root->left,k,find);
        count++;
        if(count==k)
        {
            result =root->val;
            find = true;
            return;
        }
        dfs(root->right,k,find);
    }
    int kthSmallest(TreeNode* root, int k) {
        bool find = false;
        result = -1;
        count = 0;
        dfs(root, k, find);
        return result;
    }
};

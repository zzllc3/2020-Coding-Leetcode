/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 //O(N)中序+排序+重建
// class Solution {
// public:
//     void recoverTree(TreeNode* root) {
//         vector<int> result;
//         inOrder(root,result);
//         sort(result.begin(),result.end());
//         recover(root,result);
//     }

//     void inOrder(TreeNode* root,vector<int>& vecResult){
//         if(root == nullptr){
//             return;
//         }
//         inOrder(root->left,vecResult);
//         vecResult.push_back(root->val);
//         inOrder(root->right,vecResult);
//     }

//     void recover(TreeNode* root,vector<int>& rec){
//         if(root ==nullptr){
//             return;
//         }
//         recover(root->left,rec);
//         if(root->val == rec[0]){
//             rec.erase(rec.begin());
//         }else{
//             root->val = rec[0];
//             rec.erase(rec.begin());
//         };
//         recover(root->right,rec);
//     }
// };


//O(1)中序遍历 + 双指针找逆序对 + Morris遍历

